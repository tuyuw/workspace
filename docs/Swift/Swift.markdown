---
layout: default
title: Swift
nav_order: 17
permalink: /docs/Swift
has_children: true
---

## 大纲



## 术语

- 值
- 变量
- 引用
- 常量

值(value)是不变的，永久的，它从不会被改变。字面量。结构体和枚举是值类型。当你把一个结构体变量赋值给另一个，那么这两个变量将会包含同样的值。

引用(reference)是一种特殊类型的值：它是一个"指向"另一个值的值。类是引用类型。引用类型具有同一性，也就是说，你可以使用===来检查两个变量是否确实引用了同一个对象。

在程序语言的论文中，==有时候被称为结构相等，而===则被称为指针相等或者引用相等。

一个引用变量也可以用let来声明，这样做会使引用变量为常量。换句话说，这会使变量不能被改变为引用其他东西，不过很重要的是，这并不意味着这个变量所引用的对象本身不能被改变。这一点造成的问题是，就算在一个声明变量的地方看到let，你也不能一下子就知道声明的东西是不是完全不可变的。想要做出正确的判断，你必须先知道这个变量持有的是值类型还是引用类型。

复制值类型时，它通常执行深复制，也就是说，它包含的所有值会被递归地复制。这种复制可能是在赋值新变量时就发生的，也可能会延迟到变量内容发生变更的时候再发生。执行深复制的类型被称作具有值语义。

这里我们会遇到另一件复杂的事情。如果我们的结构体中包含有引用类型，在将结构体赋值给一个新变量时所发生的复制行为中，这些引用类型的内容是不会被自动复制一份的，只有引用本身会被复制。这种复制的行为被称作浅复制。

Data结构体实际上是对引用类型NSData的一个封装。当Data结构体发生变化的时候对其中的NSData对象进行深复制，它使用一种名为"写时复制的技术来保证操作的高效。我们需要重点知道的是，这种写时复制的特性并不是直接具有的，它需要额外进行实现。

Swift中，像是数组这样的集合类型也都是对引用类型的封装，它们同样使用了写时复制的方式在提供值语义的同时保持高效。不过，如果集合元素的类型是引用类型(比如一个含有对象的数组)的话，对象本身将不会被复制，只有对它的引用会被复制。也就是说，Swift的数组只有当其中的元素满足值语义时，数组本身才具有值语义。

