---
layout: default
title: 性能优化
nav_order: 5
parent: interview
---

## 分类

- 界面渲染
- 网络请求
- 启动时间 [冷启动优化](https://blog.fiteen.top/2020/ios-app-launch-optimization)
- 包的大小
- 数据io


### 冷启动优化

- pre main: 用户唤起App到执行main函数之前的过程
- main: main被调用之后，didFinishLaunchingWithOptions/viewDidAppear之间的过程

pre main: 

- 加载动态链接器
- 加载dylib
- - 尽量不使用内嵌dylib
- - 合并已有内嵌dylib
- - 检查framework的optional和required设置，如果版本支持则required，optional额外检查导致加载变慢
- - 使用静态库代替
- rebase/bind
- - 核心是减少__DATA段中的指针
- - 减少ObjC类，方法、分类
- - 减少C++虚函数
- - 多用Swift Structs
- Objc setup
- - 同上
- - dyld会注册所有声明过的ObjC类
- - 将分类插入到类的方法列表中
- - 检查每个selector的唯一性
- initializer
- - 执行如下操作：
- - - 调用每个ObjC类和分类中的+load方法
- - - 调用C/C++中的构造器函数(用attrubute((constructor))修饰的函数)
- - - 创建非基本类型的C++静态全局变量
- - 优化：
- - - 尽量避免在类的+load方法中初始化，可以推迟到+initialize中进行
- - - 避免使用__attribute((constructor))将方法显示标记为初始化器，而是让初始化方法调用时再执行。
- - - 减少非基本类型的 C++ 静态全局变量的个数。

main: 

- 用纯代码的方式，而不是xib/Storyboard来加载首页视图
- 延迟暂时不需要的三方库加载
- 延迟执行部分业务逻辑和UI配置
- 避免首屏加载时大量的本地/网络数据读取
- release包中移除NSLog打印


webview：

- webview预加载：在App启动时期预先加载一次webview，通过创建空的webview，预先启动Web线程，完成一些全局性的配置
- 页面耗时(静态页面)：
- - 静态直出：服务端拉取数据后通过Node.js进行渲染，生成包含首屏数据的HTML文件，发布到CDN上，webview直接从CDN上获取
- - 离线预推：使用离线包
- 页面耗时(经常需要动态更新的页面):
- - 并行加载：webview的打开和资源的请求并行
- - 动态缓存：动态页面缓存在客户端，用户下次打开的时候先打开缓存页面。然后刷新
- - 动静分离：将页面分为静态模版和动态数据，根据不同的启动场景进行不同的刷新方案
- - 预加载：提前拉取需要的增量更新数据

## 视频播放

- [十亿级视频播放技术优化揭密](https://juejin.cn/post/6844903517254090760)

## JS收集页面加载性能数据

通过window.performance.timing获取信息

~~~js
;(function() {
    if (window.performance) {
        const info = window.performance.timing;
        const details = [
            {
                title: '网页重定向的耗时',
                value: info.redirectEnd - info.redirectStart + 'ms'
            },
            {
                title: '检查本地缓存的耗时',
                value: info.domainLookupStart - info.fetchStart + 'ms'
            },
            {
                title: 'DNS查询的耗时',
                value: info.domainLookupEnd - info.domainLookupStart + 'ms'
            },
            {
                title: 'TCP连接的耗时',
                value: info.connectEnd - info.connectStart + 'ms'
            },
            {
                title: '客户端发起请求的耗时',
                value: info.responseStart - info.requestStart + 'ms'
            },
            {
                title: '服务端响应的耗时',
                value: info.responseEnd - info.responseStart + 'ms'
            },
            {
                title: '渲染页面的耗时',
                value: info.domComplete - info.responseEnd + 'ms'
            },
            {
                title: '解析DOM树耗时',
                value: info.domComplete - info.domInteractive + 'ms'
            },
            {
                title: '白屏时间',
                value: info.domLoading - info.fetchStart + 'ms'
            },
            {
                title: 'DOMContentLoaded',
                value: info.domContentLoadedEventEnd - info.fetchStart + 'ms'
            },
            {
                title: 'Loaded',
                value: info.loadEventEnd - info.connectStart + 'ms'
            }
        ];
 
        console.log(details);
    }
}())
~~~

### Instruments

#### Core Animation

- Color Blended Layers
用于检测哪里发生了图层混合，以红色为标记

图层混合：多层layer透明度并非都为100%的混合显示。
alpha通道： 记录透明度信息的特殊图层。

解决: 
图片不含alpha通道
设置白色背景
opaque=true

- Color Hits Green and Misses Red
用于检测光栅化，命中缓存显示为绿色，否则为红色。

 光栅化是将一个layer预先渲染成位图(bitmap)，然后加入缓存中。如果对于阴影效果这样比较消耗资源的静态内容进行缓存，可以得到一定幅度的性能提升。

 将label的layer光栅化：
 > label.layer.shouldRasterize = true
 
光栅化的缓存机制是一把双刃剑，先写入缓存再读取有可能消耗较多的时间。因此光栅化仅适用于较复杂的、静态的效果。

- Color Copied Images
颜色格式
用于检测图片实时的格式转换，如果转换则为蓝色。

比如应用中有一些从网络下载的图片，而GPU恰好不支持这个格式，这就需要CPU预先进行格式转化

- Color Misaligned Images
图片大小

用于检测图片是否被缩放了，如果被缩放则标记为黄色，如果没有像素对齐则标记为紫色

图片的缩放需要占用时间，调整所有图片的像素大小以避免不必要的缩放。

- Color Offscreen-Rendered Yellow
离屏渲染
用于检测离屏渲染，标记为黄色，手动触发离屏渲染layer.shouldRasterize = true（开启光栅化）

可能造成离屏渲染:
1、重写drawRect方法
2、设置圆角+masksToBounds=true
3、阴影(layer.masksToBounds, layer.shadow*)

首先，OpenGL提交一个命令到Command Buffer，随后GPU开始渲染，渲染结果放到Render Buffer中，这是正常的渲染流程。

如果添加一个蒙版(mask)：在前两个渲染通道中，GPU分别得到了纹理(texture，也就是那个相机图标)和layer(蓝色的蒙版)的渲染结果。但这两个渲染结果没有直接放入Render Buffer中，也就表示这是离屏渲染。直到第三个渲染通道，才把两者组合起来放入Render Buffer中。

离屏渲染意味着把渲染结果临时保存，等用到时再取出，因此相对于普通渲染更占用资源。

- Color Compositing Fast-Path Blue
快速路径

用于标记由硬件绘制的路径，蓝色越多越好。

- Flash updated Regions
变化区域

用于标记发生重绘的区域

刷新视图时，我们应该把需要重绘的区域尽可能缩小。对于未发生变化的内容则不应该重绘。一个典型的例子是系统的时钟应用，绝大多数时候只有显示秒针的区域需要重绘


总结:

#### 避免图层混合

- 确保控件的opaque属性设置为true，确保backgroundColor和父视图颜色一致且不透明。

- 如无特殊需要，不要设置低于1的alpha值。

- 确保UIImage没有alpha通道。

#### 避免临时转换

- 确保图片大小和frame一致，不要在滑动时缩放图片。

- 确保图片颜色格式被GPU支持，避免劳烦CPU转换。

#### 慎用离屏渲染

- 绝大多数时候离屏渲染会影响性能。

- 重写drawRect方法，设置圆角、阴影、模糊效果，光栅化都会导致离屏渲染。

- 设置阴影效果是加上阴影路径。

- 滑动时若需要圆角效果，开启光栅化

### UITableView优化

- 重用cell
- 对于高度固定的cell，直接设置高度；对于动态的，估算高度后进行缓存
- cell中使用不透明的视图
- 图片异步加载
- 非必要不使用reloadData



### 网络请求
通过系统方法缓存get请求数据
~~~
NSURLCache *urlCache = [[NSURLCache alloc] initWithMemoryCapacity:4 * 1024 * 1024 diskCapacity:20 * 1024 * 1024 diskPath:nil];
[NSURLCache setSharedURLCache:urlCache];
~~~

文件的缓存需要借助ETag或Last-Modified判断缓存是否过期


### 参考

    + [UIKit性能调优实战讲解](http://www.cocoachina.com/articles/15238)
    + [iOS网络缓存扫盲篇](https://www.jianshu.com/p/fb5aaeac06ef)