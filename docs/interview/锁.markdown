---
layout: default
title: 锁
nav_order: 2
parent: interview
---

## 概念

我们在使用多线程的时候多个线程可能会访问同一块资源，这样就很容易引发数据错乱和数据安全等问题，这时候就需要我们保证每次只有一个线程访问这一块资源，锁 应运而生。

效率图:

![image](../../../images/Interview/lock.png)

### OSSpinLock 自旋锁

自旋锁的实现原理比较简单，就是死循环。当线程a获得锁以后，b线程想要获取锁就需要等待a线程释放锁。在没有获得锁的期间，b线程会一直处于忙等的状态。自旋锁用在临界区执行时间比较短的环境性能会很高。

OSSpinLock不安全，主要原因是发生在低优先级线程拿到锁时，高优先级线程进入忙等状态，消耗大量CPU时间，从而导致低优先级线程拿不到CPU时间，也就无法完成任务并解锁。这种问题被称为优先级反转。

iOS10.0以后废弃这种锁机制，使用os_unfair_lock替换，能够保证不同优先级的线程申请锁的时候不会发生优先级反转问题.

现代操作系统在管理普通线程时，通常采用时间片轮转算法，每个线程会被分配一段时间片，通常在10-100ms左右。当线程用完属于自己的时间片一后，就会被操作系统挂起，放入等待队列中，直到下一次分配时间片。

### os_unfair_lock 自旋锁

解决不同优先级的线程申请锁的时候不会发生优先级反转问题，相对于OSSpinLock，性能有所减弱

### dispatch_semaphore 信号量

其他功能：

- 起到阻塞线程的作用
- 实现定时器功能

### pthread_mutex 互斥锁

和信号量的实现原理类似，也是阻塞线程并进入睡眠，需要进行上下文切换

~~~C
pthread_mutexattr_t attr;
pthread_mutexattr_init(&attr);
pthread_mutexattr_settype(&attr, PTHREAD_MUTEX_NORMAL);

pthread_mutex_t lock;
pthread_mutex_init(&lock, &attr); // 设置属性

pthread_mutex_lock(&lock); // 上锁
//需要执行的代码
pthread_mutex_unlock(&lock); // 解锁
~~~

### NSLock 互斥锁、对象锁

NSLock在内部封装了一个pthread_mutex，属性为PTHREAD_MUTEX_ERRORCHECK

~~~ObjC
NSLock *lock = [NSLock new];

[lock lock];
//需要执行的代码
[lock unlock];
~~~

### NSCondition 条件锁、对象锁

NSCondition封装了一个互斥锁和条件变量。互斥锁保证线程安全，条件变量保证执行顺序。

~~~ObjC
NSCondition *lock = [NSCondition new];

[lock lock];
//需要执行的代码
[lock unlock];
~~~

### pthread_mutex(recursive)递归锁

pthread_mutex 锁的一种，属于递归锁。一般一个线程只能申请一把锁，但是，如果是递归锁，则可以申请申请多把锁，只要上锁和解锁的操作数量等量就不会报错。

~~~C
pthread_mutexattr_t attr:
pthread_mutexattr_init(&attr);
pthread_mutexattr_settype(&attr, PTHREAD_MUTEX_RECURSIVE);

pthread_mutex_t lock;
pthread_mutex_init(&lock, &attr); //设置属性

pthread_mutex_lock(&lock); //上锁
//需要执行的代码
pthread_mutex_unlock(&lock); //解锁
~~~

递归锁可以被同一线程多次请求，而不会引起死锁。即在同一线程中在未解锁之前还可以上锁，执行锁中的代码。主要用于循环/递归操作中

### NSRecursiveLock 递归锁、对象锁

pthread_mutex(recursive)的封装

~~~Objc
NSRecursiveLock *lock = [NSRecursiveLock new];

[lock lock];
//需要执行的代码
[lock unlock];
~~~

### NSConditionLock 条件锁、对象锁

NSConditionLock借助NSCondition来实现，本质是生产者-消费者模型。

~~~ObjC
NSConditionLock *lock = [NSConditionLock new];

[lock lock];
//需要执行的代码
[lock unlock];
~~~


### @synchronized 条件锁/互斥

一个对象层面的锁，锁住了整个对象，底层使用了互斥递归锁来实现。

当上一个线程的任务没有执行完毕的时候(被锁住),那么下一个线程会进入睡眠状态等待任务执行完毕，当上一个线程的任务执行完毕，下一个线程会自动唤醒然后执行任务。

注意点:

- 如果多线程访问同一个资源，那么必须使用同一把锁才能锁住。
- 在开发中，尽量不要加锁，能在服务端做尽量在服务端做，如果必须要加锁，一定要记住，锁的范围不能太大，哪里有安全隐患就加在哪里。
- 因为必须使用同一把锁，开发中如果需要加锁，直接使用self即可。

~~~ObjC
NSObject *object = [NSObject new];

@synchronized(object) {
	//需要执行的代码
}
~~~

### atomic 自旋锁

比较适合做一些不耗时的操作

注意点: 只会给setter方法加锁，并不会给getter方法加锁


